// <auto-generated />
using System;
using System.Collections.Generic;
using FafCarsApi.Enums;
using FafCarsApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FafCarsApi.Migrations
{
    [DbContext(typeof(FafCarsDbContext))]
    [Migration("20240616065020_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "body_style", new[] { "sedan", "suv", "crossover", "van", "minivan", "hatchback", "wagon", "coupe", "pickup_truck", "convertible", "other" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "car_color", new[] { "black", "white", "silver", "gray", "blue", "red", "brown", "green", "beige", "yellow", "gold", "orange", "purple", "pink", "burgundy", "turquoise", "ivory", "bronze", "teal", "navy" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "engine_type", new[] { "petrol", "diesel", "hybrid", "electric", "other" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_role", new[] { "admin", "listing_creator" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FafCarsApi.Models.Brand", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.HasKey("Name");

                    b.HasIndex("CountryCode");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("FafCarsApi.Models.City", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.HasKey("Name");

                    b.HasIndex("CountryCode");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("FafCarsApi.Models.Country", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Code");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("FafCarsApi.Models.Listing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("UUID_GENERATE_V4()");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<BodyStyle>("BodyStyle")
                        .HasColumnType("body_style");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CityName")
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("Clearance")
                        .HasColumnType("integer");

                    b.Property<CarColor?>("Color")
                        .HasColumnType("car_color");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(1) WITHOUT TIME ZONE")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TIMESTAMP(1) WITHOUT TIME ZONE");

                    b.Property<EngineType>("EngineType")
                        .HasColumnType("engine_type");

                    b.Property<double?>("EngineVolume")
                        .HasColumnType("double precision");

                    b.Property<int?>("Horsepower")
                        .HasColumnType("integer");

                    b.Property<List<string>>("Images")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int?>("Mileage")
                        .HasColumnType("integer");

                    b.Property<string>("ModelName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Preview")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(1) WITHOUT TIME ZONE")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("WheelSize")
                        .HasColumnType("integer");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BrandName");

                    b.HasIndex("CityName");

                    b.HasIndex("CountryCode");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ModelName");

                    b.HasIndex("Price");

                    b.HasIndex("PublisherId");

                    b.HasIndex("Year");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("FafCarsApi.Models.Model", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Name");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("FafCarsApi.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("UUID_GENERATE_V4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(1) WITHOUT TIME ZONE")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TIMESTAMP(1) WITHOUT TIME ZONE");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<List<UserRole>>("Roles")
                        .IsRequired()
                        .HasColumnType("user_role[]");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(1) WITHOUT TIME ZONE")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ModelsBrands", b =>
                {
                    b.Property<string>("BrandsName")
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ModelsName")
                        .HasColumnType("character varying(255)");

                    b.HasKey("BrandsName", "ModelsName");

                    b.HasIndex("ModelsName");

                    b.ToTable("ModelsBrands");
                });

            modelBuilder.Entity("UsersFavoriteListings", b =>
                {
                    b.Property<Guid>("FavoritesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersFavoritesId")
                        .HasColumnType("uuid");

                    b.HasKey("FavoritesId", "UsersFavoritesId");

                    b.HasIndex("UsersFavoritesId");

                    b.ToTable("UsersFavoriteListings");
                });

            modelBuilder.Entity("FafCarsApi.Models.Brand", b =>
                {
                    b.HasOne("FafCarsApi.Models.Country", "Country")
                        .WithMany("Brands")
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("FafCarsApi.Models.City", b =>
                {
                    b.HasOne("FafCarsApi.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("FafCarsApi.Models.Listing", b =>
                {
                    b.HasOne("FafCarsApi.Models.Brand", "Brand")
                        .WithMany("Listings")
                        .HasForeignKey("BrandName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FafCarsApi.Models.City", null)
                        .WithMany("Listings")
                        .HasForeignKey("CityName");

                    b.HasOne("FafCarsApi.Models.Country", "Country")
                        .WithMany("Listings")
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FafCarsApi.Models.Model", "Model")
                        .WithMany("Listings")
                        .HasForeignKey("ModelName");

                    b.HasOne("FafCarsApi.Models.User", "Publisher")
                        .WithMany("Listings")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Country");

                    b.Navigation("Model");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("ModelsBrands", b =>
                {
                    b.HasOne("FafCarsApi.Models.Brand", null)
                        .WithMany()
                        .HasForeignKey("BrandsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FafCarsApi.Models.Model", null)
                        .WithMany()
                        .HasForeignKey("ModelsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UsersFavoriteListings", b =>
                {
                    b.HasOne("FafCarsApi.Models.Listing", null)
                        .WithMany()
                        .HasForeignKey("FavoritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FafCarsApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersFavoritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FafCarsApi.Models.Brand", b =>
                {
                    b.Navigation("Listings");
                });

            modelBuilder.Entity("FafCarsApi.Models.City", b =>
                {
                    b.Navigation("Listings");
                });

            modelBuilder.Entity("FafCarsApi.Models.Country", b =>
                {
                    b.Navigation("Brands");

                    b.Navigation("Cities");

                    b.Navigation("Listings");
                });

            modelBuilder.Entity("FafCarsApi.Models.Model", b =>
                {
                    b.Navigation("Listings");
                });

            modelBuilder.Entity("FafCarsApi.Models.User", b =>
                {
                    b.Navigation("Listings");
                });
#pragma warning restore 612, 618
        }
    }
}
