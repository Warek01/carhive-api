// <auto-generated />
using System;
using System.Collections.Generic;
using FafCarsApi.Enums;
using FafCarsApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FafCarsApi.Migrations
{
    [DbContext(typeof(FafCarsDbContext))]
    [Migration("20240615120521_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "body_style", new[] { "sedan", "suv", "crossover", "van", "minivan", "hatchback", "wagon", "coupe", "pickup_truck", "convertible", "other" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "car_color", new[] { "black", "white", "silver", "gray", "blue", "red", "brown", "green", "beige", "yellow", "gold", "orange", "purple", "pink", "burgundy", "turquoise", "ivory", "bronze", "teal", "navy" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "engine_type", new[] { "gas", "diesel", "hybrid", "electric", "other" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FafCarsApi.Models.Brand", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Name");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Name = "Acura"
                        },
                        new
                        {
                            Name = "Alfa Romeo"
                        },
                        new
                        {
                            Name = "Audi"
                        },
                        new
                        {
                            Name = "Bentley"
                        },
                        new
                        {
                            Name = "BMW"
                        },
                        new
                        {
                            Name = "Bugatti"
                        },
                        new
                        {
                            Name = "Buick"
                        },
                        new
                        {
                            Name = "BYD"
                        },
                        new
                        {
                            Name = "Cadillac"
                        },
                        new
                        {
                            Name = "Chery"
                        },
                        new
                        {
                            Name = "Chevrolet"
                        },
                        new
                        {
                            Name = "Chrysler"
                        },
                        new
                        {
                            Name = "Daihatsu"
                        },
                        new
                        {
                            Name = "Dodge"
                        },
                        new
                        {
                            Name = "Ferrari"
                        },
                        new
                        {
                            Name = "Fiat"
                        },
                        new
                        {
                            Name = "Ford"
                        },
                        new
                        {
                            Name = "Genesis"
                        },
                        new
                        {
                            Name = "Geely"
                        },
                        new
                        {
                            Name = "GMC"
                        },
                        new
                        {
                            Name = "Honda"
                        },
                        new
                        {
                            Name = "Hummer"
                        },
                        new
                        {
                            Name = "Hyundai"
                        },
                        new
                        {
                            Name = "Infiniti"
                        },
                        new
                        {
                            Name = "Jaguar"
                        },
                        new
                        {
                            Name = "Jeep"
                        },
                        new
                        {
                            Name = "Kia"
                        },
                        new
                        {
                            Name = "Koenigsegg"
                        },
                        new
                        {
                            Name = "Lada"
                        },
                        new
                        {
                            Name = "Lamborghini"
                        },
                        new
                        {
                            Name = "Land Rover"
                        },
                        new
                        {
                            Name = "Lexus"
                        },
                        new
                        {
                            Name = "Lincoln"
                        },
                        new
                        {
                            Name = "Lotus"
                        },
                        new
                        {
                            Name = "Maserati"
                        },
                        new
                        {
                            Name = "Maybach"
                        },
                        new
                        {
                            Name = "Mazda"
                        },
                        new
                        {
                            Name = "McLaren"
                        },
                        new
                        {
                            Name = "Mercedes-Benz"
                        },
                        new
                        {
                            Name = "Mini"
                        },
                        new
                        {
                            Name = "Mitsubishi"
                        },
                        new
                        {
                            Name = "Nissan"
                        },
                        new
                        {
                            Name = "Oldsmobile"
                        },
                        new
                        {
                            Name = "Pagani"
                        },
                        new
                        {
                            Name = "Pontiac"
                        },
                        new
                        {
                            Name = "Porsche"
                        },
                        new
                        {
                            Name = "Proton"
                        },
                        new
                        {
                            Name = "Ram"
                        },
                        new
                        {
                            Name = "Rolls-Royce"
                        },
                        new
                        {
                            Name = "Saab"
                        },
                        new
                        {
                            Name = "Saturn"
                        },
                        new
                        {
                            Name = "Smart"
                        },
                        new
                        {
                            Name = "Spyker"
                        },
                        new
                        {
                            Name = "Subaru"
                        },
                        new
                        {
                            Name = "Suzuki"
                        },
                        new
                        {
                            Name = "Tesla"
                        },
                        new
                        {
                            Name = "Toyota"
                        },
                        new
                        {
                            Name = "Volkswagen"
                        },
                        new
                        {
                            Name = "Volvo"
                        });
                });

            modelBuilder.Entity("FafCarsApi.Models.Listing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("UUID_GENERATE_V4()");

                    b.Property<BodyStyle>("BodyStyle")
                        .HasColumnType("body_style");

                    b.Property<string>("BrandName")
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("Clearance")
                        .HasColumnType("integer");

                    b.Property<CarColor?>("Color")
                        .HasColumnType("car_color");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(1) WITHOUT TIME ZONE")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TIMESTAMP(1) WITHOUT TIME ZONE");

                    b.Property<EngineType>("EngineType")
                        .HasColumnType("engine_type");

                    b.Property<double?>("EngineVolume")
                        .HasColumnType("double precision");

                    b.Property<int?>("Horsepower")
                        .HasColumnType("integer");

                    b.Property<List<string>>("Images")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int?>("Mileage")
                        .HasColumnType("integer");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Preview")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(1) WITHOUT TIME ZONE")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("WheelSize")
                        .HasColumnType("integer");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BrandName");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Price");

                    b.HasIndex("PublisherId");

                    b.HasIndex("Year");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("FafCarsApi.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("UUID_GENERATE_V4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(1) WITHOUT TIME ZONE")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TIMESTAMP(1) WITHOUT TIME ZONE");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int[]>("Roles")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(1) WITHOUT TIME ZONE")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("57c6566c-b3fb-495c-a03e-7472029e2e56"),
                            CreatedAt = new DateTime(2024, 6, 15, 15, 5, 20, 34, DateTimeKind.Local).AddTicks(7955),
                            Email = "admin@gmail.com",
                            Password = "$2a$13$IfjFOJc3.FR9.qnXU2hxWeyUubYzrD2Tr7KYYa4FFR5XQ0AlOn8mG",
                            PhoneNumber = "+37378000111",
                            Roles = new[] { 0, 1 },
                            UpdatedAt = new DateTime(2024, 6, 15, 15, 5, 20, 43, DateTimeKind.Local).AddTicks(8683),
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("c1e0a155-e3cf-4380-b7d6-ad0c3e5fa511"),
                            CreatedAt = new DateTime(2024, 6, 15, 15, 5, 20, 508, DateTimeKind.Local).AddTicks(6957),
                            Email = "user@gmail.com",
                            Password = "$2a$13$3TaTDVjNj2CZAH8hODNV6O.W3X3o/75E6vbM5mRx3SV7d3exE/E8y",
                            PhoneNumber = "+37378111222",
                            Roles = new[] { 0 },
                            UpdatedAt = new DateTime(2024, 6, 15, 15, 5, 20, 508, DateTimeKind.Local).AddTicks(7012),
                            Username = "user"
                        });
                });

            modelBuilder.Entity("UsersFavoriteListings", b =>
                {
                    b.Property<Guid>("FavoritesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersFavoritesId")
                        .HasColumnType("uuid");

                    b.HasKey("FavoritesId", "UsersFavoritesId");

                    b.HasIndex("UsersFavoritesId");

                    b.ToTable("UsersFavoriteListings");
                });

            modelBuilder.Entity("FafCarsApi.Models.Listing", b =>
                {
                    b.HasOne("FafCarsApi.Models.Brand", "Brand")
                        .WithMany("Listings")
                        .HasForeignKey("BrandName");

                    b.HasOne("FafCarsApi.Models.User", "Publisher")
                        .WithMany("Listings")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("UsersFavoriteListings", b =>
                {
                    b.HasOne("FafCarsApi.Models.Listing", null)
                        .WithMany()
                        .HasForeignKey("FavoritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FafCarsApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersFavoritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FafCarsApi.Models.Brand", b =>
                {
                    b.Navigation("Listings");
                });

            modelBuilder.Entity("FafCarsApi.Models.User", b =>
                {
                    b.Navigation("Listings");
                });
#pragma warning restore 612, 618
        }
    }
}
